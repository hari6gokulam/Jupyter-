{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79b4d7ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "989214f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Vol.</th>\n",
       "      <th>Change %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mar 19, 2022</td>\n",
       "      <td>41,661.3</td>\n",
       "      <td>41,768.0</td>\n",
       "      <td>41,998.4</td>\n",
       "      <td>41,529.6</td>\n",
       "      <td>2.27B</td>\n",
       "      <td>-0.25%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mar 18, 2022</td>\n",
       "      <td>41,767.8</td>\n",
       "      <td>40,914.6</td>\n",
       "      <td>42,308.4</td>\n",
       "      <td>40,234.8</td>\n",
       "      <td>2.31B</td>\n",
       "      <td>2.08%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mar 17, 2022</td>\n",
       "      <td>40,914.8</td>\n",
       "      <td>41,118.7</td>\n",
       "      <td>41,406.0</td>\n",
       "      <td>40,557.8</td>\n",
       "      <td>1.90B</td>\n",
       "      <td>-0.50%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mar 16, 2022</td>\n",
       "      <td>41,118.7</td>\n",
       "      <td>39,282.5</td>\n",
       "      <td>41,701.6</td>\n",
       "      <td>38,953.2</td>\n",
       "      <td>4.47B</td>\n",
       "      <td>4.67%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mar 15, 2022</td>\n",
       "      <td>39,285.7</td>\n",
       "      <td>39,673.0</td>\n",
       "      <td>39,854.7</td>\n",
       "      <td>38,220.9</td>\n",
       "      <td>2.25B</td>\n",
       "      <td>-0.97%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2599</th>\n",
       "      <td>Feb 05, 2015</td>\n",
       "      <td>216.5</td>\n",
       "      <td>226.6</td>\n",
       "      <td>229.9</td>\n",
       "      <td>214.4</td>\n",
       "      <td>40.64K</td>\n",
       "      <td>-4.44%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2600</th>\n",
       "      <td>Feb 04, 2015</td>\n",
       "      <td>226.6</td>\n",
       "      <td>227.4</td>\n",
       "      <td>230.7</td>\n",
       "      <td>220.2</td>\n",
       "      <td>55.24K</td>\n",
       "      <td>-0.36%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2601</th>\n",
       "      <td>Feb 03, 2015</td>\n",
       "      <td>227.4</td>\n",
       "      <td>238.9</td>\n",
       "      <td>247.5</td>\n",
       "      <td>223.9</td>\n",
       "      <td>63.08K</td>\n",
       "      <td>-4.79%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2602</th>\n",
       "      <td>Feb 02, 2015</td>\n",
       "      <td>238.9</td>\n",
       "      <td>225.3</td>\n",
       "      <td>242.5</td>\n",
       "      <td>220.5</td>\n",
       "      <td>39.02K</td>\n",
       "      <td>6.02%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2603</th>\n",
       "      <td>Feb 01, 2015</td>\n",
       "      <td>225.3</td>\n",
       "      <td>218.5</td>\n",
       "      <td>231.4</td>\n",
       "      <td>209.7</td>\n",
       "      <td>41.16K</td>\n",
       "      <td>3.10%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2604 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Date     Price      Open      High       Low    Vol. Change %\n",
       "0     Mar 19, 2022  41,661.3  41,768.0  41,998.4  41,529.6   2.27B   -0.25%\n",
       "1     Mar 18, 2022  41,767.8  40,914.6  42,308.4  40,234.8   2.31B    2.08%\n",
       "2     Mar 17, 2022  40,914.8  41,118.7  41,406.0  40,557.8   1.90B   -0.50%\n",
       "3     Mar 16, 2022  41,118.7  39,282.5  41,701.6  38,953.2   4.47B    4.67%\n",
       "4     Mar 15, 2022  39,285.7  39,673.0  39,854.7  38,220.9   2.25B   -0.97%\n",
       "...            ...       ...       ...       ...       ...     ...      ...\n",
       "2599  Feb 05, 2015     216.5     226.6     229.9     214.4  40.64K   -4.44%\n",
       "2600  Feb 04, 2015     226.6     227.4     230.7     220.2  55.24K   -0.36%\n",
       "2601  Feb 03, 2015     227.4     238.9     247.5     223.9  63.08K   -4.79%\n",
       "2602  Feb 02, 2015     238.9     225.3     242.5     220.5  39.02K    6.02%\n",
       "2603  Feb 01, 2015     225.3     218.5     231.4     209.7  41.16K    3.10%\n",
       "\n",
       "[2604 rows x 7 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_btc= pd.read_csv('C:/Users/hari6/Desktop/Bitcoin Historical Data - Investing.com India.csv')\n",
    "display(df_btc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5d8a014d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SYMBOL</th>\n",
       "      <th>SERIES</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>PREVCLOSE</th>\n",
       "      <th>TOTTRDQTY</th>\n",
       "      <th>TOTTRDVAL</th>\n",
       "      <th>TOTALTRADES</th>\n",
       "      <th>ISIN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1018GS2026</td>\n",
       "      <td>GS</td>\n",
       "      <td>100.96</td>\n",
       "      <td>107.51</td>\n",
       "      <td>106.05</td>\n",
       "      <td>3</td>\n",
       "      <td>3.159800e+02</td>\n",
       "      <td>3</td>\n",
       "      <td>IN0020010081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20MICRONS</td>\n",
       "      <td>EQ</td>\n",
       "      <td>77.60</td>\n",
       "      <td>76.50</td>\n",
       "      <td>76.60</td>\n",
       "      <td>189683</td>\n",
       "      <td>1.481983e+07</td>\n",
       "      <td>2232</td>\n",
       "      <td>INE144J01027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21STCENMGM</td>\n",
       "      <td>EQ</td>\n",
       "      <td>28.65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.10</td>\n",
       "      <td>490</td>\n",
       "      <td>1.403850e+04</td>\n",
       "      <td>14</td>\n",
       "      <td>INE253B01015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3IINFOLTD</td>\n",
       "      <td>EQ</td>\n",
       "      <td>57.60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>57.15</td>\n",
       "      <td>1141592</td>\n",
       "      <td>6.583435e+07</td>\n",
       "      <td>7688</td>\n",
       "      <td>INE748C01038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3MINDIA</td>\n",
       "      <td>EQ</td>\n",
       "      <td>20198.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20040.90</td>\n",
       "      <td>5094</td>\n",
       "      <td>1.037474e+08</td>\n",
       "      <td>2843</td>\n",
       "      <td>INE470A01017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2169</th>\n",
       "      <td>ZOTA</td>\n",
       "      <td>EQ</td>\n",
       "      <td>312.10</td>\n",
       "      <td>318.45</td>\n",
       "      <td>315.35</td>\n",
       "      <td>21417</td>\n",
       "      <td>6.808331e+06</td>\n",
       "      <td>579</td>\n",
       "      <td>INE358U01012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170</th>\n",
       "      <td>ZUARI</td>\n",
       "      <td>EQ</td>\n",
       "      <td>142.20</td>\n",
       "      <td>136.90</td>\n",
       "      <td>141.40</td>\n",
       "      <td>124982</td>\n",
       "      <td>1.752748e+07</td>\n",
       "      <td>2909</td>\n",
       "      <td>INE840M01016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2171</th>\n",
       "      <td>ZUARIGLOB</td>\n",
       "      <td>EQ</td>\n",
       "      <td>191.40</td>\n",
       "      <td>184.70</td>\n",
       "      <td>189.90</td>\n",
       "      <td>119501</td>\n",
       "      <td>2.253274e+07</td>\n",
       "      <td>3435</td>\n",
       "      <td>INE217A01012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2172</th>\n",
       "      <td>ZYDUSLIFE</td>\n",
       "      <td>EQ</td>\n",
       "      <td>360.90</td>\n",
       "      <td>367.80</td>\n",
       "      <td>360.10</td>\n",
       "      <td>1283159</td>\n",
       "      <td>4.694875e+08</td>\n",
       "      <td>22155</td>\n",
       "      <td>INE010B01027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2173</th>\n",
       "      <td>ZYDUSWELL</td>\n",
       "      <td>EQ</td>\n",
       "      <td>1472.95</td>\n",
       "      <td>1470.60</td>\n",
       "      <td>1472.95</td>\n",
       "      <td>257679</td>\n",
       "      <td>3.819507e+08</td>\n",
       "      <td>11675</td>\n",
       "      <td>INE768C01010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2174 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          SYMBOL SERIES      OPEN    CLOSE  PREVCLOSE  TOTTRDQTY  \\\n",
       "0     1018GS2026     GS    100.96   107.51     106.05          3   \n",
       "1      20MICRONS     EQ     77.60    76.50      76.60     189683   \n",
       "2     21STCENMGM     EQ     28.65      NaN      28.10        490   \n",
       "3      3IINFOLTD     EQ     57.60      NaN      57.15    1141592   \n",
       "4        3MINDIA     EQ  20198.00      NaN   20040.90       5094   \n",
       "...          ...    ...       ...      ...        ...        ...   \n",
       "2169        ZOTA     EQ    312.10   318.45     315.35      21417   \n",
       "2170       ZUARI     EQ    142.20   136.90     141.40     124982   \n",
       "2171   ZUARIGLOB     EQ    191.40   184.70     189.90     119501   \n",
       "2172   ZYDUSLIFE     EQ    360.90   367.80     360.10    1283159   \n",
       "2173   ZYDUSWELL     EQ   1472.95  1470.60    1472.95     257679   \n",
       "\n",
       "         TOTTRDVAL  TOTALTRADES          ISIN  \n",
       "0     3.159800e+02            3  IN0020010081  \n",
       "1     1.481983e+07         2232  INE144J01027  \n",
       "2     1.403850e+04           14  INE253B01015  \n",
       "3     6.583435e+07         7688  INE748C01038  \n",
       "4     1.037474e+08         2843  INE470A01017  \n",
       "...            ...          ...           ...  \n",
       "2169  6.808331e+06          579  INE358U01012  \n",
       "2170  1.752748e+07         2909  INE840M01016  \n",
       "2171  2.253274e+07         3435  INE217A01012  \n",
       "2172  4.694875e+08        22155  INE010B01027  \n",
       "2173  3.819507e+08        11675  INE768C01010  \n",
       "\n",
       "[2174 rows x 9 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_nse= pd.read_csv('C:/Users/hari6/Desktop/NSE23MAR2022bhav.csv')\n",
    "display(df_nse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22216861",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2d872265",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4a562e76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['p', 'q', 'r', 's', 't', 'p', 'q', 'r', 's', 't', 'p', 'q', 'r', 's', 't']"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b=['p','q','r','s','t']\n",
    "print(type(b))     #see the type as list\n",
    "3*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a5a9ee4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "b=np.array(['p','q','r','s','t'])\n",
    "print(type(b))     #see the type here as ndarray below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d50d0512",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([100, 200, 300, 400])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c=np.array([10,20,30,40])\n",
    "10*c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ef36c121",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[100, 200, 300, 400, 500, 600]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d=[1,2,3,4,5,6]\n",
    "[100*i for i in d]       * just multiply by 100 only but [] was needed in syntax "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9f3857a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20 40  30 60  40 80  50 100  60 120  70 140  "
     ]
    }
   ],
   "source": [
    "e=[2,3,4,5,6,7]\n",
    "for i in e:\n",
    "   print( 10*i, 20*i,\" \", end=\"\")   # used end=\" to print in the same line itself"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5bc27611",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('<U32')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z=np.array([1,'a',3.5,0])    #remeber to put ' ' for a\n",
    "z.dtype       # datatype is something called u32\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d0fb72b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      sreev\n",
      "1        jyo\n",
      "2    karthik\n",
      "dtype: object\n",
      "average        sreev\n",
      "ordinary         jyo\n",
      "brilliant    karthik\n",
      "dtype: string\n",
      "{'sreev': 'sreev', 'jyo': 'jyo', 'karthik': 'karthik'}\n"
     ]
    }
   ],
   "source": [
    "#series\n",
    "stud=['sreev','jyo','karthik']\n",
    "studs=pd.Series(stud)\n",
    "pd.Series(stud, ['average','ordinary','brilliant'])\n",
    "####\n",
    "\n",
    "print(studs)\n",
    "magic=pd.Series(stud,['average','ordinary','brilliant'], dtype='string')   \n",
    "\n",
    "print(magic)\n",
    "#remember syntax  for converting to string/dict datatype\n",
    "#positional argument follows keyword argument\n",
    "\n",
    "#range index- Immutable object\n",
    "#custom index and custom labels cann be created\n",
    "q=dict(zip(stud,stud)) \n",
    "# q=list(zip(stud,stud))\n",
    "print(q)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7e5f460b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100  101  102  103  104  105  106  107  108  109  "
     ]
    }
   ],
   "source": [
    "for i in range(4,110,1):  #random example revision\n",
    "    print(i,' ',\n",
    "          end=\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5fbef3d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        (sreev, average)\n",
       "1         (jyo, ordinary)\n",
       "2    (karthik, brilliant)\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stud=['sreev','jyo','karthik']\n",
    "qlty=['average','ordinary','brilliant']\n",
    "\n",
    "pd.Series(list(zip(stud,qlty)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "34769986",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sreev': 'average', 'jyo': 'ordinary', 'karthik': 'brilliant'}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{name:age for name, age in zip(stud,qlty) } \n",
    "#here Ive used name and age variables from the lecture only, nothing to do with the code\n",
    "#initially didnt work with stud and qlty "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "821756c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      1\n",
       "2      2\n",
       "3      3\n",
       "4      4\n",
       "5      5\n",
       "6      6\n",
       "7      7\n",
       "8      8\n",
       "9      9\n",
       "10    10\n",
       "11    11\n",
       "12    12\n",
       "13    13\n",
       "14    14\n",
       "15    15\n",
       "16    16\n",
       "17    17\n",
       "18    18\n",
       "19    19\n",
       "20    20\n",
       "21    21\n",
       "22    22\n",
       "23    23\n",
       "24    24\n",
       "25    25\n",
       "26    26\n",
       "27    27\n",
       "28    28\n",
       "29    29\n",
       "30    30\n",
       "31    31\n",
       "32    32\n",
       "33    33\n",
       "34    34\n",
       "35    35\n",
       "36    36\n",
       "37    37\n",
       "38    38\n",
       "39    39\n",
       "40    40\n",
       "41    41\n",
       "42    42\n",
       "43    43\n",
       "44    44\n",
       "45    45\n",
       "46    46\n",
       "47    47\n",
       "48    48\n",
       "49    49\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " int=pd.Series([i for i in range (50)])   # checkwhy it didnt work\n",
    "int                                       #it works but need to call int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ef0cdc47",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      1\n",
       "2      2\n",
       "3      3\n",
       "4      4\n",
       "5      5\n",
       "6      6\n",
       "7      7\n",
       "8      8\n",
       "9      9\n",
       "10    10\n",
       "11    11\n",
       "12    12\n",
       "13    13\n",
       "14    14\n",
       "15    15\n",
       "16    16\n",
       "17    17\n",
       "18    18\n",
       "19    19\n",
       "20    20\n",
       "21    21\n",
       "22    22\n",
       "23    23\n",
       "24    24\n",
       "25    25\n",
       "26    26\n",
       "27    27\n",
       "28    28\n",
       "29    29\n",
       "30    30\n",
       "31    31\n",
       "32    32\n",
       "33    33\n",
       "34    34\n",
       "35    35\n",
       "36    36\n",
       "37    37\n",
       "38    38\n",
       "39    39\n",
       "40    40\n",
       "41    41\n",
       "42    42\n",
       "43    43\n",
       "44    44\n",
       "45    45\n",
       "46    46\n",
       "47    47\n",
       "48    48\n",
       "49    49\n",
       "50    50\n",
       "51    51\n",
       "52    52\n",
       "53    53\n",
       "54    54\n",
       "55    55\n",
       "56    56\n",
       "57    57\n",
       "58    58\n",
       "59    59\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series( range(60))   # also worked fine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e10b5414",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50   50\n",
      "50\n",
      "45    45\n",
      "46    46\n",
      "47    47\n",
      "48    48\n",
      "49    49\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    1\n",
       "2    2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(len(int),\" \", int.size)     # both does the same\n",
    "print(int.size)\n",
    "len(int) ==int.size    #ath polichu length of the series named int\n",
    "print(int.tail())     # simply () for 5 last entries\n",
    "int.head(3)           #for first 3 entriespd.se"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b0c5de84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              0\n",
       "1              1\n",
       "2              2\n",
       "3              3\n",
       "4              4\n",
       "           ...  \n",
       "999995    999995\n",
       "999996    999996\n",
       "999997    999997\n",
       "999998    999998\n",
       "999999    999999\n",
       "Length: 1000000, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(range(1000000))   # by default, it prints like this with ....."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fca5e9c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    abcdefghijklmnopqrstuvwxyz\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#28 March 2022\n",
    "import pandas as pd\n",
    "from string import ascii_lowercase   #importing ASCII lowercase letters\n",
    "list(ascii_lowercase)\n",
    "pd.Series(ascii_lowercase)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c2eeb20e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "letters=list(ascii_lowercase)\n",
    "alphabets=pd.Series(letters)    #creating the SERIES named alphabets\n",
    "len(letters)   #to show the length of LIST of alphabets\n",
    "#len(aplhabet)    will show erroe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "01adb2bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label_0    a\n",
       "label_1    b\n",
       "label_2    c\n",
       "label_3    d\n",
       "label_4    e\n",
       "dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alphabets.head(9)    #showed first 9 aplhabets\n",
    "alphabets[-6:]      #to access last 6 letters: Accessing elements by label positions\n",
    "alphabets.add_prefix('label_').head()   # added a prefix as label_ and printed first 5 using head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e121df4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    a\n",
       "1    b\n",
       "2    c\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#to get the nth letter\n",
    "#to access series elements using []\n",
    "alphabets[:3]     # extract first 3 letters from 0:3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c233dcf2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz"
     ]
    }
   ],
   "source": [
    "#accessing elements by label also possible apart from accessing by label positions\n",
    "from string import ascii_uppercase\n",
    "print(ascii_uppercase, ascii_lowercase, end=\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9611756c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label_A    a\n",
      "label_B    b\n",
      "label_C    c\n",
      "dtype: object  b\n",
      "a\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'v'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " labelled= pd.Series(data=list(ascii_lowercase), index=map(lambda x: 'label_'+ x, list(ascii_uppercase)))\n",
    "    #appended label_ to every element of list using a lambda function\n",
    " #labelled.head(3)     # both will work\n",
    "print(labelled[:3],' ', end=\"\")         #this printed both label and element | sliced by index position\n",
    "print(labelled[1])  # ans b was printed after object in the o/p\n",
    "print(labelled['label_A'])     #this printed only element why??  also see ' ' inside []\n",
    "\n",
    "labelled.label_V  #simple syntax using . to access but has limitation as : cannot be used to print a range\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "865e2b90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      sreev\n",
       "1        jyo\n",
       "2    karthik\n",
       "dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " #Boolean arrays and .loc indexers\n",
    "#.loc is the prototypical way to do LABEL BASED extraction sq bracket supports a mix of syntaxes and fns.\n",
    "pd.Series(studs)\n",
    "studs.loc[[True,True,True]]   #herewith, change from stud to studs is effective\n",
    "\n",
    "#see [ ] syntax for loc also"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "10a13eb6",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label_A    a\n",
       "label_B    b\n",
       "label_C    c\n",
       "label_D    d\n",
       "label_E    e\n",
       "label_F    f\n",
       "label_G    g\n",
       "label_H    h\n",
       "label_I    i\n",
       "label_J    j\n",
       "label_K    k\n",
       "label_L    l\n",
       "label_M    m\n",
       "label_N    n\n",
       "label_O    o\n",
       "label_P    p\n",
       "label_Q    q\n",
       "label_R    r\n",
       "label_S    s\n",
       "label_T    t\n",
       "label_U    u\n",
       "label_V    v\n",
       "label_W    w\n",
       "label_X    x\n",
       "label_Y    y\n",
       "label_Z    z\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labelled.loc[[True for i in range(26)]]    # True, false number shoud be equl to elements in  the series(26)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7b8f49af",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label_A    a\n",
       "label_C    c\n",
       "label_E    e\n",
       "label_G    g\n",
       "label_I    i\n",
       "label_K    k\n",
       "label_M    m\n",
       "label_O    o\n",
       "label_Q    q\n",
       "label_S    s\n",
       "label_U    u\n",
       "label_W    w\n",
       "label_Y    y\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labelled.loc[[True if i%2==0 else False for i in range(26)]]\n",
    "# extract alternate alphabets "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "79416c34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label_F    f\n",
      "label_G    g\n",
      "label_H    h\n",
      "label_I    i\n",
      "dtype: object\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "label_F    f\n",
       "label_G    g\n",
       "label_H    h\n",
       "label_I    i\n",
       "dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#iloc used to extract by POSITION, i for integer; remember usage of []\n",
    "print(labelled.iloc[[5,6,7,8]])\n",
    "labelled.iloc[5:9]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "adfda1e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "jyo\n",
      "karthik\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'Sorry'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get instead of loc  to extract  use of ()and not []\n",
    "#get support a default parameter None, if an inexistent element is being tired to extract, its shows nothing\n",
    "print(studs.get(1))\n",
    "print(studs.get(2))   # doesnt show error but returns nothing \"None\"\n",
    "studs.get(15, default='Sorry')\n",
    "# we may change the default return \"None\" value to anything, can even assign a python dict there\n",
    "#.loc and [] indexing approach returns key errors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "36f613fa",
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0          0\n",
       "1          1\n",
       "2          4\n",
       "3          9\n",
       "4         16\n",
       "       ...  \n",
       "96      9216\n",
       "97      9409\n",
       "98      9604\n",
       "99      9801\n",
       "100    10000\n",
       "Length: 101, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test=list(i*i for i in range(0,101))\n",
    "square= list\n",
    "print(test)\n",
    "pd.Series(test)\n",
    "#pd.Series(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0885cbe3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[9604, 9801, 10000]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test[-3:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "60554060",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mar 19, 2022</td>\n",
       "      <td>41,661.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mar 18, 2022</td>\n",
       "      <td>41,767.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mar 17, 2022</td>\n",
       "      <td>40,914.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Mar 16, 2022</td>\n",
       "      <td>41,118.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mar 15, 2022</td>\n",
       "      <td>39,285.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2599</th>\n",
       "      <td>Feb 05, 2015</td>\n",
       "      <td>216.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2600</th>\n",
       "      <td>Feb 04, 2015</td>\n",
       "      <td>226.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2601</th>\n",
       "      <td>Feb 03, 2015</td>\n",
       "      <td>227.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2602</th>\n",
       "      <td>Feb 02, 2015</td>\n",
       "      <td>238.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2603</th>\n",
       "      <td>Feb 01, 2015</td>\n",
       "      <td>225.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2604 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Date     Price\n",
       "0     Mar 19, 2022  41,661.3\n",
       "1     Mar 18, 2022  41,767.8\n",
       "2     Mar 17, 2022  40,914.8\n",
       "3     Mar 16, 2022  41,118.7\n",
       "4     Mar 15, 2022  39,285.7\n",
       "...            ...       ...\n",
       "2599  Feb 05, 2015     216.5\n",
       "2600  Feb 04, 2015     226.6\n",
       "2601  Feb 03, 2015     227.4\n",
       "2602  Feb 02, 2015     238.9\n",
       "2603  Feb 01, 2015     225.3\n",
       "\n",
       "[2604 rows x 2 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#29 March 2022: Importing csv; usecols=[''] parameter, with column heads sep by commas within' to load them alone\n",
    "# multiple series; dataframe\n",
    "pd.read_csv('C:/Users/hari6/Desktop/Bitcoin Historical Data - Investing.com India.csv',usecols=['Date','Price'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7a66c21b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Price\n",
      "Date                  \n",
      "Mar 19, 2022  41,661.3\n",
      "Mar 18, 2022  41,767.8\n",
      "Mar 17, 2022  40,914.8\n",
      "Mar 16, 2022  41,118.7\n",
      "Mar 15, 2022  39,285.7\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bitcoin=pd.read_csv('C:/Users/hari6/Desktop/Bitcoin Historical Data - Investing.com India.csv',usecols=['Date','Price'], index_col='Date')\n",
    "#using index_col='' parameter for making Date column as index\n",
    "print(bitcoin.head())\n",
    "type(bitcoin)   #its a dataframe type because read_csv reads cvs file into dataframe\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cdd85673",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date\n",
      "Mar 19, 2022    41,661.3\n",
      "Mar 18, 2022    41,767.8\n",
      "Mar 17, 2022    40,914.8\n",
      "Mar 16, 2022    41,118.7\n",
      "Mar 15, 2022    39,285.7\n",
      "Name: Price, dtype: object\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bitcoin=pd.read_csv('C:/Users/hari6/Desktop/Bitcoin Historical Data - Investing.com India.csv',usecols=['Date','Price'], index_col='Date',squeeze=True)\n",
    "#using index_col='' parameter for making Date column as index\n",
    "#squeeze=True parameter to convert Df into normal SERIES (with obj type )\n",
    "print(bitcoin.head())\n",
    "type(bitcoin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "8c68d514",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2604"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Series Attributes\n",
    "bitcoin.size  #to get the size of series  can use len() also\n",
    "bitcoin.values  #toaccess the values as an array\n",
    "bitcoin.index  #to get the index as an array print and see both\n",
    "len(bitcoin)\n",
    "#.shape not used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5539002c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# .is_unique \n",
    "print(bitcoin.head().is_unique) #as the prices of BTC has not been the same anu two days ever\n",
    "bitcoin.is_unique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3eadacc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2519"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# nunique gives the count of unique values\n",
    "bitcoin.nunique()   # 2519 unique values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6c6b052c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(bitcoin.head().is_monotonic)   # since the BTC prices not monotonously increasing\n",
    "bitcoin[35:39].is_monotonic   #  monotonically incresing somewhere btw 36 and 40 rows indexed [35:39]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "67dbfa8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bitcoin[39:35].is_monotonic_decreasing   #athu polichu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8c9e5e80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2604"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#series.count() return number of non-NA or non-null vallues\n",
    "bitcoin.count()   # not same as len()   count will not count void cells "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c18d43e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#series.hasnans attribute to check if there are null values\n",
    "bitcoin.hasnans  # here there are no null values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be16cd82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SYMBOL</th>\n",
       "      <th>SERIES</th>\n",
       "      <th>OPEN</th>\n",
       "      <th>CLOSE</th>\n",
       "      <th>PREVCLOSE</th>\n",
       "      <th>TOTTRDQTY</th>\n",
       "      <th>TOTTRDVAL</th>\n",
       "      <th>TOTALTRADES</th>\n",
       "      <th>ISIN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1018GS2026</td>\n",
       "      <td>GS</td>\n",
       "      <td>100.96</td>\n",
       "      <td>107.51</td>\n",
       "      <td>106.05</td>\n",
       "      <td>3</td>\n",
       "      <td>3.159800e+02</td>\n",
       "      <td>3</td>\n",
       "      <td>IN0020010081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20MICRONS</td>\n",
       "      <td>EQ</td>\n",
       "      <td>77.60</td>\n",
       "      <td>76.50</td>\n",
       "      <td>76.60</td>\n",
       "      <td>189683</td>\n",
       "      <td>1.481983e+07</td>\n",
       "      <td>2232</td>\n",
       "      <td>INE144J01027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21STCENMGM</td>\n",
       "      <td>EQ</td>\n",
       "      <td>28.65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.10</td>\n",
       "      <td>490</td>\n",
       "      <td>1.403850e+04</td>\n",
       "      <td>14</td>\n",
       "      <td>INE253B01015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3IINFOLTD</td>\n",
       "      <td>EQ</td>\n",
       "      <td>57.60</td>\n",
       "      <td>NaN</td>\n",
       "      <td>57.15</td>\n",
       "      <td>1141592</td>\n",
       "      <td>6.583435e+07</td>\n",
       "      <td>7688</td>\n",
       "      <td>INE748C01038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3MINDIA</td>\n",
       "      <td>EQ</td>\n",
       "      <td>20198.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20040.90</td>\n",
       "      <td>5094</td>\n",
       "      <td>1.037474e+08</td>\n",
       "      <td>2843</td>\n",
       "      <td>INE470A01017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2169</th>\n",
       "      <td>ZOTA</td>\n",
       "      <td>EQ</td>\n",
       "      <td>312.10</td>\n",
       "      <td>318.45</td>\n",
       "      <td>315.35</td>\n",
       "      <td>21417</td>\n",
       "      <td>6.808331e+06</td>\n",
       "      <td>579</td>\n",
       "      <td>INE358U01012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170</th>\n",
       "      <td>ZUARI</td>\n",
       "      <td>EQ</td>\n",
       "      <td>142.20</td>\n",
       "      <td>136.90</td>\n",
       "      <td>141.40</td>\n",
       "      <td>124982</td>\n",
       "      <td>1.752748e+07</td>\n",
       "      <td>2909</td>\n",
       "      <td>INE840M01016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2171</th>\n",
       "      <td>ZUARIGLOB</td>\n",
       "      <td>EQ</td>\n",
       "      <td>191.40</td>\n",
       "      <td>184.70</td>\n",
       "      <td>189.90</td>\n",
       "      <td>119501</td>\n",
       "      <td>2.253274e+07</td>\n",
       "      <td>3435</td>\n",
       "      <td>INE217A01012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2172</th>\n",
       "      <td>ZYDUSLIFE</td>\n",
       "      <td>EQ</td>\n",
       "      <td>360.90</td>\n",
       "      <td>367.80</td>\n",
       "      <td>360.10</td>\n",
       "      <td>1283159</td>\n",
       "      <td>4.694875e+08</td>\n",
       "      <td>22155</td>\n",
       "      <td>INE010B01027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2173</th>\n",
       "      <td>ZYDUSWELL</td>\n",
       "      <td>EQ</td>\n",
       "      <td>1472.95</td>\n",
       "      <td>1470.60</td>\n",
       "      <td>1472.95</td>\n",
       "      <td>257679</td>\n",
       "      <td>3.819507e+08</td>\n",
       "      <td>11675</td>\n",
       "      <td>INE768C01010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2174 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          SYMBOL SERIES      OPEN    CLOSE  PREVCLOSE  TOTTRDQTY  \\\n",
       "0     1018GS2026     GS    100.96   107.51     106.05          3   \n",
       "1      20MICRONS     EQ     77.60    76.50      76.60     189683   \n",
       "2     21STCENMGM     EQ     28.65      NaN      28.10        490   \n",
       "3      3IINFOLTD     EQ     57.60      NaN      57.15    1141592   \n",
       "4        3MINDIA     EQ  20198.00      NaN   20040.90       5094   \n",
       "...          ...    ...       ...      ...        ...        ...   \n",
       "2169        ZOTA     EQ    312.10   318.45     315.35      21417   \n",
       "2170       ZUARI     EQ    142.20   136.90     141.40     124982   \n",
       "2171   ZUARIGLOB     EQ    191.40   184.70     189.90     119501   \n",
       "2172   ZYDUSLIFE     EQ    360.90   367.80     360.10    1283159   \n",
       "2173   ZYDUSWELL     EQ   1472.95  1470.60    1472.95     257679   \n",
       "\n",
       "         TOTTRDVAL  TOTALTRADES          ISIN  \n",
       "0     3.159800e+02            3  IN0020010081  \n",
       "1     1.481983e+07         2232  INE144J01027  \n",
       "2     1.403850e+04           14  INE253B01015  \n",
       "3     6.583435e+07         7688  INE748C01038  \n",
       "4     1.037474e+08         2843  INE470A01017  \n",
       "...            ...          ...           ...  \n",
       "2169  6.808331e+06          579  INE358U01012  \n",
       "2170  1.752748e+07         2909  INE840M01016  \n",
       "2171  2.253274e+07         3435  INE217A01012  \n",
       "2172  4.694875e+08        22155  INE010B01027  \n",
       "2173  3.819507e+08        11675  INE768C01010  \n",
       "\n",
       "[2174 rows x 9 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Accessing and counting NA's\n",
    "import pandas as pd\n",
    "nse=pd.read_csv('C:/Users/hari6/Desktop/NSE23MAR2022bhav.csv')\n",
    "nse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5a31152",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2174 CLOSE    2164\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CLOSE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SYMBOL</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1018GS2026</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20MICRONS</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21STCENMGM</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3IINFOLTD</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3MINDIA</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZOTA</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZUARI</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZUARIGLOB</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZYDUSLIFE</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ZYDUSWELL</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2174 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            CLOSE\n",
       "SYMBOL           \n",
       "1018GS2026  False\n",
       "20MICRONS   False\n",
       "21STCENMGM   True\n",
       "3IINFOLTD    True\n",
       "3MINDIA      True\n",
       "...           ...\n",
       "ZOTA        False\n",
       "ZUARI       False\n",
       "ZUARIGLOB   False\n",
       "ZYDUSLIFE   False\n",
       "ZYDUSWELL   False\n",
       "\n",
       "[2174 rows x 1 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Accessing and counting NA's\n",
    "nse=pd.read_csv('C:/Users/hari6/Desktop/NSE23MAR2022bhav.csv',usecols=['SYMBOL','CLOSE'], index_col='SYMBOL')\n",
    "print(nse.size,nse.count())   # size is 2174 and count is 2164 as Ive removed columns 4-13; see excel\n",
    "nse.isnull()    #see True from row 3 onwards: usage of isnull\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2def8b69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2174 CLOSE    2164\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['1018GS2026',\n",
       " '20MICRONS',\n",
       " '21STCENMGM',\n",
       " '3IINFOLTD',\n",
       " '3MINDIA',\n",
       " '3PLAND',\n",
       " '563GS2026',\n",
       " '5PAISA',\n",
       " '63MOONS',\n",
       " '667GS2050',\n",
       " '676GS2061',\n",
       " '699GS2051',\n",
       " '727GS2026',\n",
       " '817GS2044',\n",
       " 'A2ZINFRA',\n",
       " 'AAATECH',\n",
       " 'AAKASH',\n",
       " 'AAREYDRUGS',\n",
       " 'AARON',\n",
       " 'AARTIDRUGS',\n",
       " 'AARTIIND',\n",
       " 'AARTISURF',\n",
       " 'AARVEEDEN',\n",
       " 'AARVI',\n",
       " 'AAVAS',\n",
       " 'ABAN',\n",
       " 'ABB',\n",
       " 'ABBOTINDIA',\n",
       " 'ABCAPITAL',\n",
       " 'ABCOTS',\n",
       " 'ABFRL',\n",
       " 'ABMINTLLTD',\n",
       " 'ABSLAMC',\n",
       " 'ABSLBANETF',\n",
       " 'ABSLNN50ET',\n",
       " 'ACC',\n",
       " 'ACCELYA',\n",
       " 'ACCORD',\n",
       " 'ACCURACY',\n",
       " 'ACE',\n",
       " 'ACRYSIL',\n",
       " 'ADANIENT',\n",
       " 'ADANIGREEN',\n",
       " 'ADANIPORTS',\n",
       " 'ADANIPOWER',\n",
       " 'ADANITRANS',\n",
       " 'ADFFOODS',\n",
       " 'ADL',\n",
       " 'ADORWELD',\n",
       " 'ADROITINFO',\n",
       " 'ADSL',\n",
       " 'ADVANIHOTR',\n",
       " 'ADVENZYMES',\n",
       " 'AEGISCHEM',\n",
       " 'AFFLE',\n",
       " 'AGARIND',\n",
       " 'AGRITECH',\n",
       " 'AGROPHOS',\n",
       " 'AGSTRA',\n",
       " 'AHLADA',\n",
       " 'AHLEAST',\n",
       " 'AHLUCONT',\n",
       " 'AIAENG',\n",
       " 'AILIMITED',\n",
       " 'AIRAN',\n",
       " 'AIROLAM',\n",
       " 'AIRTELPP',\n",
       " 'AISL',\n",
       " 'AJANTPHARM',\n",
       " 'AJMERA',\n",
       " 'AJOONI',\n",
       " 'AJRINFRA',\n",
       " 'AKASH',\n",
       " 'AKG',\n",
       " 'AKSHARCHEM',\n",
       " 'AKSHOPTFBR',\n",
       " 'AKZOINDIA',\n",
       " 'ALANKIT',\n",
       " 'ALBERTDAVD',\n",
       " 'ALEMBICLTD',\n",
       " 'ALICON',\n",
       " 'ALKALI',\n",
       " 'ALKEM',\n",
       " 'ALKYLAMINE',\n",
       " 'ALLCARGO',\n",
       " 'ALLSEC',\n",
       " 'ALMONDZ',\n",
       " 'ALOKINDS',\n",
       " 'ALPA',\n",
       " 'ALPHAGEO',\n",
       " 'ALPSINDUS',\n",
       " 'AMARAJABAT',\n",
       " 'AMBER',\n",
       " 'AMBICAAGAR',\n",
       " 'AMBIKCO',\n",
       " 'AMBUJACEM',\n",
       " 'AMDIND',\n",
       " 'AMIORG',\n",
       " 'AMJLAND',\n",
       " 'AMJUMBO',\n",
       " 'AMRUTANJAN',\n",
       " 'ANANDRATHI',\n",
       " 'ANANTRAJ',\n",
       " 'ANDHRACEMT',\n",
       " 'ANDHRAPAP',\n",
       " 'ANDHRSUGAR',\n",
       " 'ANDREWYU',\n",
       " 'ANGELONE',\n",
       " 'ANIKINDS',\n",
       " 'ANKITMETAL',\n",
       " 'ANMOL',\n",
       " 'ANSALAPI',\n",
       " 'ANSALHSG',\n",
       " 'ANTGRAPHIC',\n",
       " 'ANUP',\n",
       " 'ANURAS',\n",
       " 'APARINDS',\n",
       " 'APCL',\n",
       " 'APCOTEXIND',\n",
       " 'APEX',\n",
       " 'APLAPOLLO',\n",
       " 'APLLTD',\n",
       " 'APOLLO',\n",
       " 'APOLLOHOSP',\n",
       " 'APOLLOPIPE',\n",
       " 'APOLLOTYRE',\n",
       " 'APOLSINHOT',\n",
       " 'APTECHT',\n",
       " 'APTUS',\n",
       " 'ARCHIDPLY',\n",
       " 'ARCHIES',\n",
       " 'ARENTERP',\n",
       " 'ARIES',\n",
       " 'ARIHANTCAP',\n",
       " 'ARIHANTSUP',\n",
       " 'ARMANFIN',\n",
       " 'AROGRANITE',\n",
       " 'ARROWGREEN',\n",
       " 'ARSHIYA',\n",
       " 'ARSSINFRA',\n",
       " 'ARTEMISMED',\n",
       " 'ARTNIRMAN',\n",
       " 'ARVEE',\n",
       " 'ARVIND',\n",
       " 'ARVINDFASN',\n",
       " 'ARVSMART',\n",
       " 'ASAHIINDIA',\n",
       " 'ASAHISONG',\n",
       " 'ASAL',\n",
       " 'ASALCBR',\n",
       " 'ASHAPURMIN',\n",
       " 'ASHIANA',\n",
       " 'ASHIMASYN',\n",
       " 'ASHOKA',\n",
       " 'ASHOKLEY',\n",
       " 'ASIANENE',\n",
       " 'ASIANHOTNR',\n",
       " 'ASIANPAINT',\n",
       " 'ASIANTILES',\n",
       " 'ASPINWALL',\n",
       " 'ASTEC',\n",
       " 'ASTERDM',\n",
       " 'ASTRAL',\n",
       " 'ASTRAMICRO',\n",
       " 'ASTRAZEN',\n",
       " 'ASTRON',\n",
       " 'ATALREAL',\n",
       " 'ATFL',\n",
       " 'ATGL',\n",
       " 'ATLANTA',\n",
       " 'ATUL',\n",
       " 'ATULAUTO',\n",
       " 'AUBANK',\n",
       " 'AURIONPRO',\n",
       " 'AUROPHARMA',\n",
       " 'AURUM',\n",
       " 'AUSOMENT',\n",
       " 'AUTOAXLES',\n",
       " 'AUTOIND',\n",
       " 'AVADHSUGAR',\n",
       " 'AVANTIFEED',\n",
       " 'AVTNPL',\n",
       " 'AWHCL',\n",
       " 'AWL',\n",
       " 'AXISBANK',\n",
       " 'AXISBNKETF',\n",
       " 'AXISBPSETF',\n",
       " 'AXISCADES',\n",
       " 'AXISCETF',\n",
       " 'AXISGOLD',\n",
       " 'AXISHCETF',\n",
       " 'AXISNIFTY',\n",
       " 'AXISTECETF',\n",
       " 'AYMSYNTEX',\n",
       " 'BAFNAPH',\n",
       " 'BAGFILMS',\n",
       " 'BAJAJ-AUTO',\n",
       " 'BAJAJCON',\n",
       " 'BAJAJELEC',\n",
       " 'BAJAJFINSV',\n",
       " 'BAJAJFINSV',\n",
       " 'BAJAJHCARE',\n",
       " 'BAJAJHIND',\n",
       " 'BAJAJHLDNG',\n",
       " 'BAJFINANCE',\n",
       " 'BALAJITELE',\n",
       " 'BALAMINES',\n",
       " 'BALAXI',\n",
       " 'BALKRISHNA',\n",
       " 'BALKRISIND',\n",
       " 'BALLARPUR',\n",
       " 'BALMLAWRIE',\n",
       " 'BALPHARMA',\n",
       " 'BALRAMCHIN',\n",
       " 'BANARBEADS',\n",
       " 'BANARISUG',\n",
       " 'BANCOINDIA',\n",
       " 'BANDHANBNK',\n",
       " 'BANG',\n",
       " 'BANKA',\n",
       " 'BANKBARODA',\n",
       " 'BANKBEES',\n",
       " 'BANKINDIA',\n",
       " 'BANSWRAS',\n",
       " 'BARBEQUE',\n",
       " 'BARTRONICS',\n",
       " 'BASF',\n",
       " 'BASML',\n",
       " 'BATAINDIA',\n",
       " 'BAYERCROP',\n",
       " 'BBETF0432',\n",
       " 'BBL',\n",
       " 'BBOX',\n",
       " 'BBTC',\n",
       " 'BBTCL',\n",
       " 'BCG',\n",
       " 'BCLIND',\n",
       " 'BCONCEPTS',\n",
       " 'BCP',\n",
       " 'BDL',\n",
       " 'BEARDSELL',\n",
       " 'BECTORFOOD',\n",
       " 'BEDMUTHA',\n",
       " 'BEL',\n",
       " 'BEML',\n",
       " 'BEPL',\n",
       " 'BERGEPAINT',\n",
       " 'BESTAGRO',\n",
       " 'BETA',\n",
       " 'BEWLTD',\n",
       " 'BFINVEST',\n",
       " 'BFUTILITIE',\n",
       " 'BGRENERGY',\n",
       " 'BHAGCHEM',\n",
       " 'BHAGERIA',\n",
       " 'BHAGYANGR',\n",
       " 'BHAGYAPROP',\n",
       " 'BHANDARI',\n",
       " 'BHARATFORG',\n",
       " 'BHARATGEAR',\n",
       " 'BHARATRAS',\n",
       " 'BHARATWIRE',\n",
       " 'BHARTIARTL',\n",
       " 'BHEL',\n",
       " 'BIGBLOC',\n",
       " 'BIL',\n",
       " 'BINDALAGRO',\n",
       " 'BIOCON',\n",
       " 'BIOFILCHEM',\n",
       " 'BIRET',\n",
       " 'BIRLACABLE',\n",
       " 'BIRLACORPN',\n",
       " 'BIRLAMONEY',\n",
       " 'BIRLATYRE',\n",
       " 'BKMINDST',\n",
       " 'BLBLIMITED',\n",
       " 'BLISSGVS',\n",
       " 'BLKASHYAP',\n",
       " 'BLS',\n",
       " 'BLUECOAST',\n",
       " 'BLUEDART',\n",
       " 'BLUESTARCO',\n",
       " 'BMETRICS',\n",
       " 'BODALCHEM',\n",
       " 'BOMDYEING',\n",
       " 'BOROLTD',\n",
       " 'BORORENEW',\n",
       " 'BOSCHLTD',\n",
       " 'BPCL',\n",
       " 'BPL',\n",
       " 'BRFL',\n",
       " 'BRIGADE',\n",
       " 'BRIGHT',\n",
       " 'BRITANNIA',\n",
       " 'BRITANNIA',\n",
       " 'BRITANNIA',\n",
       " 'BRNL',\n",
       " 'BROOKS',\n",
       " 'BSE',\n",
       " 'BSHSL',\n",
       " 'BSL',\n",
       " 'BSLGOLDETF',\n",
       " 'BSLNIFTY',\n",
       " 'BSLSENETFG',\n",
       " 'BSOFT',\n",
       " 'BURNPUR',\n",
       " 'BUTTERFLY',\n",
       " 'BVCL',\n",
       " 'BYKE',\n",
       " 'CADSYS',\n",
       " 'CALSOFT',\n",
       " 'CAMLINFINE',\n",
       " 'CAMS',\n",
       " 'CANBK',\n",
       " 'CANDC',\n",
       " 'CANFINHOME',\n",
       " 'CANTABIL',\n",
       " 'CAPACITE',\n",
       " 'CAPLIPOINT',\n",
       " 'CAPTRUST',\n",
       " 'CARBORUNIV',\n",
       " 'CAREERP',\n",
       " 'CARERATING',\n",
       " 'CARTRADE',\n",
       " 'CASTROLIND',\n",
       " 'CCCL',\n",
       " 'CCHHL',\n",
       " 'CCL',\n",
       " 'CDSL',\n",
       " 'CEATLTD',\n",
       " 'CEBBCO',\n",
       " 'CELEBRITY',\n",
       " 'CENTENKA',\n",
       " 'CENTEXT',\n",
       " 'CENTRALBK',\n",
       " 'CENTRUM',\n",
       " 'CENTUM',\n",
       " 'CENTURYPLY',\n",
       " 'CENTURYTEX',\n",
       " 'CERA',\n",
       " 'CEREBRAINT',\n",
       " 'CESC',\n",
       " 'CGCL',\n",
       " 'CGPOWER',\n",
       " 'CHALET',\n",
       " 'CHAMBLFERT',\n",
       " 'CHEMBOND',\n",
       " 'CHEMCON',\n",
       " 'CHEMFAB',\n",
       " 'CHEMPLASTS',\n",
       " 'CHENNPETRO',\n",
       " 'CHOLAFIN',\n",
       " 'CHOLAHLDNG',\n",
       " 'CIGNITITEC',\n",
       " 'CINELINE',\n",
       " 'CINEVISTA',\n",
       " 'CIPLA',\n",
       " 'CLEAN',\n",
       " 'CLEDUCATE',\n",
       " 'CLNINDIA',\n",
       " 'CLSEL',\n",
       " 'CMICABLES',\n",
       " 'CMMIPL',\n",
       " 'CMSINFO',\n",
       " 'COALINDIA',\n",
       " 'COASTCORP',\n",
       " 'COCHINSHIP',\n",
       " 'COFFEEDAY',\n",
       " 'COFORGE',\n",
       " 'COLPAL',\n",
       " 'COMPINFO',\n",
       " 'COMPUSOFT',\n",
       " 'CONCOR',\n",
       " 'CONFIPET',\n",
       " 'CONSOFINVT',\n",
       " 'CONTI',\n",
       " 'CONTROLPR',\n",
       " 'CORALFINAC',\n",
       " 'CORDSCABLE',\n",
       " 'COROMANDEL',\n",
       " 'COSMOFILMS',\n",
       " 'COUNCODOS',\n",
       " 'CPSEETF',\n",
       " 'CRAFTSMAN',\n",
       " 'CREATIVE',\n",
       " 'CREATIVEYE',\n",
       " 'CREDITACC',\n",
       " 'CREST',\n",
       " 'CRISIL',\n",
       " 'CROMPTON',\n",
       " 'CROWN',\n",
       " 'CSBBANK',\n",
       " 'CTE',\n",
       " 'CUB',\n",
       " 'CUBEXTUB',\n",
       " 'CUMMINSIND',\n",
       " 'CUPID',\n",
       " 'CYBERMEDIA',\n",
       " 'CYBERTECH',\n",
       " 'CYIENT',\n",
       " 'DAAWAT',\n",
       " 'DABUR',\n",
       " 'DALBHARAT',\n",
       " 'DALMIASUG',\n",
       " 'DAMODARIND',\n",
       " 'DANGEE',\n",
       " 'DATAMATICS',\n",
       " 'DATAPATTNS',\n",
       " 'DBCORP',\n",
       " 'DBL',\n",
       " 'DBREALTY',\n",
       " 'DBSTOCKBRO',\n",
       " 'DCAL',\n",
       " 'DCBBANK',\n",
       " 'DCM',\n",
       " 'DCMNVL',\n",
       " 'DCMSHRIRAM',\n",
       " 'DCMSRIND',\n",
       " 'DCW',\n",
       " 'DECCANCE',\n",
       " 'DEEPAKFERT',\n",
       " 'DEEPAKNTR',\n",
       " 'DEEPENR',\n",
       " 'DEEPINDS',\n",
       " 'DELPHIFX',\n",
       " 'DELTACORP',\n",
       " 'DELTAMAGNT',\n",
       " 'DEN',\n",
       " 'DENORA',\n",
       " 'DEVIT',\n",
       " 'DEVYANI',\n",
       " 'DFMFOODS',\n",
       " 'DGCONTENT',\n",
       " 'DHAMPURSUG',\n",
       " 'DHANBANK',\n",
       " 'DHANI',\n",
       " 'DHANILOANS',\n",
       " 'DHANILOANS',\n",
       " 'DHANILOANS',\n",
       " 'DHANILOANS',\n",
       " 'DHANILOANS',\n",
       " 'DHANILOANS',\n",
       " 'DHANILOANS',\n",
       " 'DHANUKA',\n",
       " 'DHARAMSI',\n",
       " 'DHARSUGAR',\n",
       " 'DHRUV',\n",
       " 'DHUNINV',\n",
       " 'DIAMONDYD',\n",
       " 'DICIND',\n",
       " 'DIGISPICE',\n",
       " 'DIGJAMLMTD',\n",
       " 'DIL',\n",
       " 'DISHTV',\n",
       " 'DIVISLAB',\n",
       " 'DIXON',\n",
       " 'DKEGL',\n",
       " 'DLF',\n",
       " 'DLINKINDIA',\n",
       " 'DMART',\n",
       " 'DNAMEDIA',\n",
       " 'DODLA',\n",
       " 'DOLATALGO',\n",
       " 'DOLLAR',\n",
       " 'DONEAR',\n",
       " 'DPABHUSHAN',\n",
       " 'DPSCLTD',\n",
       " 'DPWIRES',\n",
       " 'DREDGECORP',\n",
       " 'DRL',\n",
       " 'DRREDDY',\n",
       " 'DSPN50ETF',\n",
       " 'DSPNEWETF',\n",
       " 'DSPQ50ETF',\n",
       " 'DSSL',\n",
       " 'DTIL',\n",
       " 'DUCON',\n",
       " 'DUGLOBAL',\n",
       " 'DVL',\n",
       " 'DWARKESH',\n",
       " 'DYNAMATECH',\n",
       " 'DYNPRO',\n",
       " 'E2E',\n",
       " 'EASEMYTRIP',\n",
       " 'EASTSILK',\n",
       " 'EASUNREYRL',\n",
       " 'EBANK',\n",
       " 'EBBETF0423',\n",
       " 'EBBETF0425',\n",
       " 'EBBETF0430',\n",
       " 'EBBETF0431',\n",
       " 'ECLERX',\n",
       " 'ECLFINANCE',\n",
       " 'ECLFINANCE',\n",
       " 'ECLFINANCE',\n",
       " 'ECLFINANCE',\n",
       " 'ECLFINANCE',\n",
       " 'ECLFINANCE',\n",
       " 'ECLFINANCE',\n",
       " 'EDELWEISS',\n",
       " 'EDUCOMP',\n",
       " 'EHFLNCD',\n",
       " 'EHFLNCD',\n",
       " 'EICHERMOT',\n",
       " 'EIDPARRY',\n",
       " 'EIFFL',\n",
       " 'EIHAHOTELS',\n",
       " 'EIHOTEL',\n",
       " 'EIMCOELECO',\n",
       " 'EKC',\n",
       " 'ELECON',\n",
       " 'ELECTCAST',\n",
       " 'ELECTHERM',\n",
       " 'ELGIEQUIP',\n",
       " 'ELGIRUBCO',\n",
       " 'EMAMILTD',\n",
       " 'EMAMIPAP',\n",
       " 'EMAMIREAL',\n",
       " 'EMBASSY',\n",
       " 'EMKAY',\n",
       " 'EMKAYTOOLS',\n",
       " 'EMMBI',\n",
       " 'ENDURANCE',\n",
       " 'ENERGYDEV',\n",
       " 'ENGINERSIN',\n",
       " 'ENIL',\n",
       " 'EPL',\n",
       " 'EQUIPPP',\n",
       " 'EQUITAS',\n",
       " 'EQUITASBNK',\n",
       " 'ERFLNCDI',\n",
       " 'ERFLNCDI',\n",
       " 'ERIS',\n",
       " 'EROSMEDIA',\n",
       " 'ESABINDIA',\n",
       " 'ESCORTS',\n",
       " 'ESSARSHPNG',\n",
       " 'ESTER',\n",
       " 'EUROBOND',\n",
       " 'EVEREADY',\n",
       " 'EVERESTIND',\n",
       " 'EXCEL',\n",
       " 'EXCELINDUS',\n",
       " 'EXIDEIND',\n",
       " 'EXPLEOSOL',\n",
       " 'EXXARO',\n",
       " 'FACT',\n",
       " 'FAIRCHEMOR',\n",
       " 'FCL',\n",
       " 'FCONSUMER',\n",
       " 'FCSSOFT',\n",
       " 'FDC',\n",
       " 'FEDERALBNK',\n",
       " 'FEL',\n",
       " 'FELDVR',\n",
       " 'FIBERWEB',\n",
       " 'FIEMIND',\n",
       " 'FILATEX',\n",
       " 'FINCABLES',\n",
       " 'FINEORG',\n",
       " 'FINOPB',\n",
       " 'FINPIPE',\n",
       " 'FLEXITUFF',\n",
       " 'FLFL',\n",
       " 'FLUOROCHEM',\n",
       " 'FMGOETZE',\n",
       " 'FMNL',\n",
       " 'FOCE',\n",
       " 'FOCUS',\n",
       " 'FOODSIN',\n",
       " 'FORCEMOT',\n",
       " 'FORTIS',\n",
       " 'FOSECOIND',\n",
       " 'FRETAIL',\n",
       " 'FSC',\n",
       " 'FSL',\n",
       " 'GABRIEL',\n",
       " 'GAEL',\n",
       " 'GAIL',\n",
       " 'GAL',\n",
       " 'GALAXYSURF',\n",
       " 'GALLANTT',\n",
       " 'GALLISPAT',\n",
       " 'GANDHITUBE',\n",
       " 'GANECOS',\n",
       " 'GANESHBE',\n",
       " 'GANESHHOUC',\n",
       " 'GANGAFORGE',\n",
       " 'GANGESSECU',\n",
       " 'GARFIBRES',\n",
       " 'GATEWAY',\n",
       " 'GATI',\n",
       " 'GAYAHWS',\n",
       " 'GAYAPROJ',\n",
       " 'GEECEE',\n",
       " 'GEEKAYWIRE',\n",
       " 'GENCON',\n",
       " 'GENESYS',\n",
       " 'GENUSPAPER',\n",
       " 'GENUSPOWER',\n",
       " 'GEOJITFSL',\n",
       " 'GEPIL',\n",
       " 'GESHIP',\n",
       " 'GET&D',\n",
       " 'GFLLIMITED',\n",
       " 'GHCL',\n",
       " 'GICHSGFIN',\n",
       " 'GICRE',\n",
       " 'GILLANDERS',\n",
       " 'GILLETTE',\n",
       " 'GINNIFILA',\n",
       " 'GIPCL',\n",
       " 'GKWLIMITED',\n",
       " 'GLAND',\n",
       " 'GLAXO',\n",
       " 'GLENMARK',\n",
       " 'GLFL',\n",
       " 'GLOBAL',\n",
       " 'GLOBALVECT',\n",
       " 'GLOBE',\n",
       " 'GLOBUSSPR',\n",
       " 'GLS',\n",
       " 'GMBREW',\n",
       " 'GMDCLTD',\n",
       " 'GMMPFAUDLR',\n",
       " 'GMRINFRA',\n",
       " 'GMRP&UI',\n",
       " 'GNA',\n",
       " 'GNFC',\n",
       " 'GOACARBON',\n",
       " 'GOCLCORP',\n",
       " 'GOCOLORS',\n",
       " 'GODFRYPHLP',\n",
       " 'GODHA',\n",
       " 'GODREJAGRO',\n",
       " 'GODREJCP',\n",
       " 'GODREJIND',\n",
       " 'GODREJPROP',\n",
       " 'GOENKA',\n",
       " 'GOKEX',\n",
       " 'GOKUL',\n",
       " 'GOKULAGRO',\n",
       " 'GOLDBEES',\n",
       " 'GOLDENTOBC',\n",
       " 'GOLDIAM',\n",
       " 'GOLDSHARE',\n",
       " 'GOLDTECH',\n",
       " 'GOODLUCK',\n",
       " 'GOODYEAR',\n",
       " 'GPIL',\n",
       " 'GPPL',\n",
       " 'GPTINFRA',\n",
       " 'GRANULES',\n",
       " 'GRAPHITE',\n",
       " 'GRASIM',\n",
       " 'GRAUWEIL',\n",
       " 'GRAVITA',\n",
       " 'GREAVESCOT',\n",
       " 'GREENLAM',\n",
       " 'GREENPANEL',\n",
       " 'GREENPLY',\n",
       " 'GREENPOWER',\n",
       " 'GRINDWELL',\n",
       " 'GRINFRA',\n",
       " 'GROBTEA',\n",
       " 'GRPLTD',\n",
       " 'GRSE',\n",
       " 'GRWRHITECH',\n",
       " 'GSCLCEMENT',\n",
       " 'GSFC',\n",
       " 'GSPL',\n",
       " 'GSS',\n",
       " 'GTL',\n",
       " 'GTLINFRA',\n",
       " 'GTPL',\n",
       " 'GUFICBIO',\n",
       " 'GUJALKALI',\n",
       " 'GUJAPOLLO',\n",
       " 'GUJGASLTD',\n",
       " 'GUJRAFFIA',\n",
       " 'GULFOILLUB',\n",
       " 'GULFPETRO',\n",
       " 'GULPOLY',\n",
       " 'HAL',\n",
       " 'HAPPSTMNDS',\n",
       " 'HARRMALAYA',\n",
       " 'HATHWAY',\n",
       " 'HATSUN',\n",
       " 'HAVELLS',\n",
       " 'HAVISHA',\n",
       " 'HBANKETF',\n",
       " 'HBLPOWER',\n",
       " 'HBSL',\n",
       " 'HCC',\n",
       " 'HCG',\n",
       " 'HCL-INSYS',\n",
       " 'HCLTECH',\n",
       " 'HDFC',\n",
       " 'HDFC',\n",
       " 'HDFCAMC',\n",
       " 'HDFCBANK',\n",
       " 'HDFCLIFE',\n",
       " 'HDFCMFGETF',\n",
       " 'HDFCNIFETF',\n",
       " 'HDFCSENETF',\n",
       " 'HDIL',\n",
       " 'HEALTHY',\n",
       " 'HECPROJECT',\n",
       " 'HEG',\n",
       " 'HEIDELBERG',\n",
       " 'HEMIPROP',\n",
       " 'HERANBA',\n",
       " 'HERCULES',\n",
       " 'HERITGFOOD',\n",
       " 'HEROMOTOCO',\n",
       " 'HESTERBIO',\n",
       " 'HEXATRADEX',\n",
       " 'HFCL',\n",
       " 'HGINFRA',\n",
       " 'HGS',\n",
       " 'HIKAL',\n",
       " 'HIL',\n",
       " 'HILTON',\n",
       " 'HIMATSEIDE',\n",
       " 'HINDALCO',\n",
       " 'HINDCOMPOS',\n",
       " 'HINDCON',\n",
       " 'HINDCOPPER',\n",
       " 'HINDMOTORS',\n",
       " 'HINDNATGLS',\n",
       " 'HINDOILEXP',\n",
       " 'HINDPETRO',\n",
       " 'HINDUNILVR',\n",
       " 'HINDZINC',\n",
       " 'HIRECT',\n",
       " 'HISARMETAL',\n",
       " 'HITECH',\n",
       " 'HITECHCORP',\n",
       " 'HITECHGEAR',\n",
       " 'HLEGLAS',\n",
       " 'HLVLTD',\n",
       " 'HMT',\n",
       " 'HMVL',\n",
       " 'HNDFDS',\n",
       " 'HNGSNGBEES',\n",
       " 'HOMEFIRST',\n",
       " 'HONAUT',\n",
       " 'HONDAPOWER',\n",
       " 'HOTELRUGBY',\n",
       " 'HOVS',\n",
       " 'HPAL',\n",
       " 'HPL',\n",
       " 'HSCL',\n",
       " 'HSIL',\n",
       " 'HTMEDIA',\n",
       " 'HUBTOWN',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUDCO',\n",
       " 'HUHTAMAKI',\n",
       " 'IBMFNIFTY',\n",
       " 'IBREALEST',\n",
       " 'IBUCCREDIT',\n",
       " 'IBULHSGFIN',\n",
       " 'IBULHSGFIN',\n",
       " 'IBULHSGFIN',\n",
       " 'IBULHSGFIN',\n",
       " 'IBULHSGFIN',\n",
       " 'IBULHSGFIN',\n",
       " 'ICDSLTD',\n",
       " 'ICEMAKE',\n",
       " 'ICICI500',\n",
       " 'ICICI5GSEC',\n",
       " 'ICICIALPLV',\n",
       " 'ICICIAUTO',\n",
       " 'ICICIB22',\n",
       " 'ICICIBANK',\n",
       " 'ICICIBANKN',\n",
       " 'ICICIBANKP',\n",
       " 'ICICICONSU',\n",
       " 'ICICIFMCG',\n",
       " 'ICICIGI',\n",
       " 'ICICIGOLD',\n",
       " 'ICICILIQ',\n",
       " 'ICICILOVOL',\n",
       " 'ICICIM150',\n",
       " 'ICICIMCAP',\n",
       " 'ICICINF100',\n",
       " 'ICICINIFTY',\n",
       " 'ICICINV20',\n",
       " 'ICICINXT50',\n",
       " 'ICICIPHARM',\n",
       " 'ICICIPRULI',\n",
       " 'ICICISENSX',\n",
       " 'ICICISILVE',\n",
       " 'ICICITECH',\n",
       " 'ICIL',\n",
       " 'ICRA',\n",
       " 'IDBI',\n",
       " 'IDBIGOLD',\n",
       " 'IDEA',\n",
       " 'IDFC',\n",
       " 'IDFCFIRSTB',\n",
       " 'IDFNIFTYET',\n",
       " 'IEX',\n",
       " 'IFBAGRO',\n",
       " 'IFBIND',\n",
       " 'IFCI',\n",
       " 'IFCI',\n",
       " 'IFCI',\n",
       " 'IFCI',\n",
       " 'IFGLEXPOR',\n",
       " 'IGARASHI',\n",
       " 'IGL',\n",
       " 'IGPL',\n",
       " 'IIFCL',\n",
       " 'IIFCL',\n",
       " 'IIFCL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFL',\n",
       " 'IIFLSEC',\n",
       " 'IIFLWAM',\n",
       " 'IIHFL',\n",
       " 'IIHFL',\n",
       " 'IIHFL',\n",
       " 'IIHFL',\n",
       " 'IIHFL',\n",
       " 'IIHFL',\n",
       " 'IITL',\n",
       " 'IL&FSENGG',\n",
       " 'IL&FSTRANS',\n",
       " 'IMAGICAA',\n",
       " 'IMFA',\n",
       " 'IMPAL',\n",
       " 'IMPEXFERRO',\n",
       " 'INCRED',\n",
       " 'INCREDIBLE',\n",
       " 'INDBANK',\n",
       " 'INDHOTEL',\n",
       " 'INDIACEM',\n",
       " 'INDIAGLYCO',\n",
       " 'INDIAMART',\n",
       " 'INDIANB',\n",
       " 'INDIANCARD',\n",
       " 'INDIANHUME',\n",
       " 'INDIGO',\n",
       " 'INDIGOPNTS',\n",
       " 'INDIGRID',\n",
       " 'INDIGRID',\n",
       " 'INDIGRID',\n",
       " 'INDIGRID',\n",
       " 'INDLMETER',\n",
       " 'INDNIPPON',\n",
       " 'INDOCO',\n",
       " 'INDORAMA',\n",
       " 'INDOSOLAR',\n",
       " 'INDOSTAR',\n",
       " 'INDOTECH',\n",
       " 'INDOTHAI',\n",
       " 'INDOWIND',\n",
       " 'INDRAMEDCO',\n",
       " 'INDSWFTLAB',\n",
       " 'INDSWFTLTD',\n",
       " 'INDTERRAIN',\n",
       " 'INDUSINDBK',\n",
       " 'INDUSTOWER',\n",
       " 'INEOSSTYRO',\n",
       " 'INFIBEAM',\n",
       " 'INFOBEAN',\n",
       " 'INFOMEDIA',\n",
       " 'INFRABEES',\n",
       " 'INFY',\n",
       " 'INGERRAND',\n",
       " 'INNOVATIVE',\n",
       " 'INOXLEISUR',\n",
       " 'INOXWIND',\n",
       " 'INSECTICID',\n",
       " 'INSPIRISYS',\n",
       " 'INTELLECT',\n",
       " 'INTENTECH',\n",
       " 'INTLCONV',\n",
       " 'INVENTURE',\n",
       " 'IOB',\n",
       " 'IOC',\n",
       " 'IOLCP',\n",
       " 'IONEXCHANG',\n",
       " 'IPCALAB',\n",
       " 'IPL',\n",
       " 'IRB',\n",
       " 'IRBINVIT',\n",
       " 'IRCON',\n",
       " 'IRCTC',\n",
       " 'IREDA',\n",
       " 'IREDA',\n",
       " 'IREDA',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRFC',\n",
       " 'IRIS',\n",
       " 'IRISDOREME',\n",
       " 'ISEC',\n",
       " 'ISFT',\n",
       " 'ISGEC',\n",
       " 'ISMTLTD',\n",
       " 'ITC',\n",
       " 'ITDC',\n",
       " 'ITDCEM',\n",
       " 'ITI',\n",
       " 'IVC',\n",
       " 'IVP',\n",
       " 'IVZINGOLD',\n",
       " 'IVZINNIFTY',\n",
       " 'IWEL',\n",
       " 'IZMO',\n",
       " 'J&KBANK',\n",
       " 'JAGRAN',\n",
       " 'JAGSNPHARM',\n",
       " 'JAIBALAJI',\n",
       " 'JAICORPLTD',\n",
       " 'JAINAM',\n",
       " 'JAINSTUDIO',\n",
       " 'JAIPURKURT',\n",
       " 'JAKHARIA',\n",
       " 'JALAN',\n",
       " 'JAMNAAUTO',\n",
       " 'JASH',\n",
       " 'JAYAGROGN',\n",
       " 'JAYBARMARU',\n",
       " 'JAYNECOIND',\n",
       " 'JAYSREETEA',\n",
       " 'JBCHEPHARM',\n",
       " 'JBFIND',\n",
       " 'JBMA',\n",
       " 'JCHAC',\n",
       " 'JETAIRWAYS',\n",
       " 'JETFREIGHT',\n",
       " 'JHS',\n",
       " 'JINDALPHOT',\n",
       " 'JINDALPOLY',\n",
       " 'JINDALSAW',\n",
       " 'JINDALSTEL',\n",
       " 'JINDRILL',\n",
       " 'JINDWORLD',\n",
       " 'JISLDVREQS',\n",
       " 'JISLJALEQS',\n",
       " 'JITFINFRA',\n",
       " 'JKCEMENT',\n",
       " 'JKIL',\n",
       " 'JKLAKSHMI',\n",
       " 'JKPAPER',\n",
       " 'JKTYRE',\n",
       " 'JMA',\n",
       " 'JMCPROJECT',\n",
       " 'JMFINANCIL',\n",
       " 'JOCIL',\n",
       " 'JPASSOCIAT',\n",
       " 'JPINFRATEC',\n",
       " 'JPOLYINVST',\n",
       " 'JPPOWER',\n",
       " 'JSL',\n",
       " 'JSLHISAR',\n",
       " 'JSWENERGY',\n",
       " 'JSWHL',\n",
       " 'JSWISPL',\n",
       " 'JSWSTEEL',\n",
       " 'JTEKTINDIA',\n",
       " 'JTLINFRA',\n",
       " 'JUBLFOOD',\n",
       " 'JUBLINDS',\n",
       " 'JUBLINGREA',\n",
       " 'JUBLPHARMA',\n",
       " 'JUNIORBEES',\n",
       " 'JUSTDIAL',\n",
       " 'JYOTHYLAB',\n",
       " ...]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nse=pd.read_csv('C:/Users/hari6/Desktop/NSE23MAR2022bhav.csv',usecols=['SYMBOL','CLOSE'], index_col='SYMBOL')\n",
    "print(nse.size,nse.count())  #size is2174 whereas count is 2164 rows 4-13 I deleted\n",
    "(list(nse[nse.isnull()].index))  # showing the python LIST of  scrip names as strings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6d8a67de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['21STCENMGM', '3IINFOLTD', '3MINDIA', '3PLAND', '563GS2026', '5PAISA', '63MOONS', '667GS2050', '676GS2061', '699GS2051']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# squeeze=True: DF type converted to list type\n",
    "nse=pd.read_csv('C:/Users/hari6/Desktop/NSE23MAR2022bhav.csv',usecols=['SYMBOL','CLOSE'], index_col='SYMBOL',squeeze=True)\n",
    "print(list(nse[nse.isnull()].index))\n",
    "len(list(nse[nse.isnull()].index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6fc5f315",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nse.isnull().sum()   # remember () after sum: check by running witjout that also\n",
    "  #sum([True,False,True,True] )   # sum(0 technically counts the sum of True values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e7d5afa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sequential and vectorised ops\n",
    "import numpy as np"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
